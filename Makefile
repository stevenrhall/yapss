DOCS_DIR = docs
USER_GUIDE_DIR = $(DOCS_DIR)/user_guide
VERBOSE ?= @

ifeq ($(shell uname), Darwin)
    OPEN = open
else
    OPEN = xdg-open
endif


.PHONY: help
help: ## Print this help message.
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; \
	{printf "\033[35m%-22s\033[0m %s\n", $$1, $$2}'

.PHONY: develop
develop: ## Install Python packages required for development, and install YAPPS (editable).
	pip install --upgrade pip
	pip install -e ".[dev,doc]"

.PHONY: test
test: ## Run the test suite using pytest
	python -m pytest --cov

.PHONY: testall
testall: ## Run the full test suite (multiple Python versions, linting, etc.) using tox.
	tox -p

.PHONY: coverage
coverage: ## Run the test suite and display the coverage in a browser.
	coverage run --source=yapss -m pytest
	coverage html
	$(OPEN) htmlcov/index.html

.PHONY: clean
clean: ## Remove caches, and files generated by testing (including coverage) and generating documentation.
	@echo "Cleaning up..."
	$(VERBOSE) rm -rf .coverage coverage.xml debug.txt htmlcov .tox .mypy_cache .pytest_cache .ruff_cache build \
		dist html prof docs/build docs/development/source/generated
	$(VERBOSE) find . -type d -name "__pycache__" -exec rm -rf {} +
	$(VERBOSE) find . -name '*.egg-info' -exec rm -rf {} +
	$(VERBOSE) find . -name '*.log' -exec rm -rf {} +
	$(MAKE) -j readme clean-docs clean-development-docs clean-notebooks
	isort src/yapss tests examples/notebooks docs/**/*.py
	black src/yapss tests examples/notebooks docs

.PHONY: clean-docs
clean-docs: ## Remove files generated by generating documentation.
	cd $(USER_GUIDE_DIR) && $(MAKE) clean

.PHONY: clean-development-docs
clean-development-docs: ## Remove files generated by generating development documentation.
	cd docs/development && $(MAKE) clean

.PHONY: clean-notebooks
clean-notebooks: ## Clear output cells of notebooks in the examples/notebooks directory.
	cd examples/notebooks && $(MAKE) clean

.PHONY: docs
docs: ## Generate user guide documentation.
	cd $(USER_GUIDE_DIR) && $(MAKE) html SPHINXOPTS="-W"

.PHONY: dev-docs
dev-docs: ## Generate development documentation.
	cd docs/development && $(MAKE) html SPHINXOPTS="-W"

.PHONY: view-docs
view-docs: ## Generate user guide documentation and open it in a browser.
	rm -rf docs/build
	#cd $(USER_GUIDE_DIR) && $(MAKE) html
	python -m sphinx -b html $(USER_GUIDE_DIR) docs/build
	$(OPEN) docs/build/index.html

.PHONY: doctest
doctest: ## Run doctests on user guide documentation.
	cd $(USER_GUIDE_DIR) && $(MAKE) doctest

.PHONY: view-dev-docs
view-dev-docs: ## Generate development documentation and open it in a browser.
	rm -rf docs/development/build
	rm -rf docs/development/source/generated
	cd docs/development && $(MAKE) html
	$(OPEN) docs/development/build/html/index.html

.PHONY: uninstall-packages
uninstall-packages: ## Uninstall all packages installed in the current environment.
	@echo "Uninstalling packages..."
	pip uninstall yapss -y
	pip freeze | grep -v "^\-e" | xargs pip uninstall -y

.PHONY: tree
tree: ## Generate a tree of the project directory.
	git ls-tree -r --name-only HEAD | tree --fromfile

.PHONY: tracked-but-ignored
tracked-but-ignored: ## lists tracked files in your Git repository that are ignored by .gitignore
	git ls-files -i --exclude-standard -c

.PHONY: test-pypi-upload
test-pypi-upload: ## Upload the package to the Test PyPI repository.
	@echo "Are sure you want to proceed to upload to TestPyPI? (yes/no)"
	@read -r response; if [ "$$response" = "yes" ]; then \
		echo "Proceeding..."; \
	else \
		echo "Aborted."; \
		exit 1; \
	fi
	rm -rf dist
	python -m build
	python -m twine upload --repository testpypi dist/*

.PHONY: pypi-upload
pypi-upload: ## Upload the package to the PyPI repository.
	@echo "Are sure you want to proceed to upload to PyPI? (yes/no)"
	@read -r response; if [ "$$response" = "yes" ]; then \
		echo "Proceeding..."; \
	else \
		echo "Aborted."; \
		exit 1; \
	fi
	@echo "Task continues here..."
	rm -rf dist
	python -m build
	python -m twine check dist/*
	# Uncomment to enable PyPI upload
	#python -m twine upload dist/*

.PHONY: pre-commit
pre-commit: ## Run pre-commit checks
	make clean
	tox
	make check-merge-artifacts

.PHONY: check-merge-artifacts
check-merge-artifacts: ## Check for merge conflict markers
	@grep -r -E '<<<<<<<|=======|>>>>>>>' src/yapss/**/*.py || true
	@if grep -E '<<<<<<<|=======|>>>>>>>' src/yapss/**/*.py > /dev/null; then \
	    echo "\033[31mWARNING: Merge conflict markers detected! Resolve before committing.\033[0m"; \
	else \
	    echo "\033[32mNo merge conflict markers found.\033[0m"; \
	fi

DOCS_BUILD = ../_docs_build
PYTHON = ../_docs_build/venv-rtd/bin/python
ACTIVATE = . ../_docs_build/venv-rtd/bin/activate
PIP = $(PYTHON) -m pip

.PHONY: rtd-env
rtd-env: rtd-clean ## create a ReadTheDocs testing environment
	git clone . $(DOCS_BUILD)
	python3.9 -m venv $(DOCS_BUILD)/venv-rtd
	$(PIP) install --upgrade pip
	#$(PIP) install -r $(DOCS_BUILD)/docs/requirements.txt
	$(PIP) install ".[doc]"

.PHONY: rtd-build
rtd-build: ## build the ReadTheDocs documentation
	$(PYTHON) -m sphinx -b html $(DOCS_BUILD)/docs/user_guide $(DOCS_BUILD)/docs/build
	$(OPEN) $(DOCS_BUILD)/docs/build/index.html

.PHONY: rtd-clean
rtd-clean: ## remove the ReadTheDocs testing environment
	rm -rf $(DOCS_BUILD)

.PHONY: rtd-all
rtd-all: rtd-env rtd-build ## create a ReadTheDocs testing environment and build the documentation

# ============================================ conda ============================================

.PHONY: build-yapss build-yapss-dev tag push-tag

# Extract version from git describe
TAG := $(shell git describe --tags --always --dirty)

build-yapss: ## build Conda yapss package
	@echo "Building yapss (version: $(TAG))"
	GIT_DESCRIBE_TAG=$(TAG) conda build -c conda-forge recipe/yapss

build-yapss-dev: ## build Conda yapss-dev package
	@echo "Building yapss-dev (version: $(TAG))"
	GIT_DESCRIBE_TAG=$(TAG) conda build -c conda-forge recipe/yapss-dev

tag: ## create a new git tag for the release: make tag VERSION=1.0.0
	@if [ -z "$(VERSION)" ]; then \
		echo "ERROR: VERSION is not set. Use 'make tag VERSION=x.y.z'"; \
		exit 1; \
	fi
	@echo "Tagging release: v$(VERSION)"
	git tag -a v$(VERSION) -m "YAPSS $(VERSION) release"
	@echo "Tag v$(VERSION) created locally. Use 'make push-tag' to push to remote."

push-tag: ## push tags to remote repository
	@echo "WARNING: This will push ALL local tags to the remote repository."
	@read -p "Are you sure you want to proceed? (y/N) " confirm; \
	if [ "$$confirm" = "y" ]; then \
		git push --tags; \
		echo "Tags pushed to remote."; \
	else \
		echo "Push canceled."; \
	fi

.PHONY: readme
readme: ## Generate README.md from docs/user_guide/index.md
	awk '/<!-- End README.md -->/ {exit} {print}' docs/user_guide/index.md > README.md
